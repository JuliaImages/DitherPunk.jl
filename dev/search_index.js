var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"dither\ndither!","category":"page"},{"location":"api/#DitherPunk.dither","page":"API Reference","title":"DitherPunk.dither","text":"dither([T::Type,] img, alg::AbstractDither, args...; kwargs...)\n\nDither image img using algorithm alg.\n\nOutput\n\nIf no return type is specified, dither will default to the type of the input image.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.dither!","page":"API Reference","title":"DitherPunk.dither!","text":"dither!([out,] img, alg::AbstractDither, args...; kwargs...)\n\nDither image img using algorithm alg.\n\nOutput\n\nIf out is specified, it will be changed in place. Otherwise img will be changed in place.\n\n\n\n\n\n","category":"function"},{"location":"api/#Algorithm-types","page":"API Reference","title":"Algorithm types","text":"","category":"section"},{"location":"api/#Error-diffusion","page":"API Reference","title":"Error diffusion","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ErrorDiffusion\nFloydSteinberg\nJarvisJudice\nAtkinson\nSierra\nTwoRowSierra\nSierraLite\nStucki\nBurkes\nFan93\nShiauFan\nShiauFan2\nSimpleErrorDiffusion","category":"page"},{"location":"api/#DitherPunk.ErrorDiffusion","page":"API Reference","title":"DitherPunk.ErrorDiffusion","text":"ErrorDiffusion(filter, offset)\n\nGeneralized error diffusion algorithm. When calling dither using a color palette cs, this will iterate over pixels and round them to the closest color in cs. The rounding error is then \"diffused\" over the neighborhood defined by the matrix filter centered around an integer offset.\n\nWhen using dither or dither! with an ErrorDiffusion method, the keyword argument clamp_error can be passed, which defaults to true. When true, the accumulated error on each pixel is clamped within limits of the image's colorant type before looking up the closest color. Setting clamp_error=false might be desired to achieve a glitchy effect.\n\nExample\n\njulia> alg = FloydSteinberg() # returns ErrorDiffusion instance\nErrorDiffusion{Rational{Int64}, UnitRange{Int64}}(CartesianIndex{2}[CartesianIndex(1, 0), CartesianIndex(-1, 1), CartesianIndex(0, 1), CartesianIndex(1, 1)], Rational{Int64}[7//16, 3//16, 5//16, 1//16], (-1:1, 0:1))\n\njulia> cs = ColorSchemes.PuOr_7  # using ColorSchemes.jl for color palette presets\n\njulia> dither(img, alg, cs)\n\njulia> dither(img, alg, cs; clamp_error=false)\n\n\n\n\n\n","category":"type"},{"location":"api/#DitherPunk.FloydSteinberg","page":"API Reference","title":"DitherPunk.FloydSteinberg","text":"FloydSteinberg()\n\nError diffusion algorithm using the filter\n\n    *   7\n3   5   1     (1//16)\n\nReferences\n\n[1]  Floyd, R.W. and L. Steinberg, \"An Adaptive Algorithm for Spatial Gray      Scale.\"  SID 1975, International Symposium Digest of Technical Papers,      vol 1975m, pp. 36-37.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.JarvisJudice","page":"API Reference","title":"DitherPunk.JarvisJudice","text":"JarvisJudice()\n\nError diffusion algorithm using the filter\n\n        *   7   5\n3   5   7   5   3\n1   3   5   3   1   (1//48)\n\nAlso known as the Jarvis, Judice, and Ninke filter.\n\nReferences\n\n[1]  Jarvis, J.F., C.N. Judice, and W.H. Ninke, \"A Survey of Techniques for      the Display of Continuous Tone Pictures on Bi-Level Displays,\" Computer      Graphics and Image Processing, vol. 5, pp. 13-40, 1976.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Atkinson","page":"API Reference","title":"DitherPunk.Atkinson","text":"Atkinson()\n\nError diffusion algorithm using the filter\n\n    *   1   1\n1   1   1\n    1               (1//8)\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Sierra","page":"API Reference","title":"DitherPunk.Sierra","text":"Sierra()\n\nError diffusion algorithm using the filter\n\n        *   5   3\n2   4   5   4   2\n    2   3   2       (1//32)\n\nAlso known as Sierra3 or three-row Sierra due to the filter shape.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.TwoRowSierra","page":"API Reference","title":"DitherPunk.TwoRowSierra","text":"TwoRowSierra()\n\nError diffusion algorithm using the filter\n\n        *   4   3\n1   2   3   2   1   (1//16)\n\nAlso known as Sierra2.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.SierraLite","page":"API Reference","title":"DitherPunk.SierraLite","text":"SierraLite()\n\nError diffusion algorithm using the filter\n\n    *   2\n1   1               (1//4)\n\nAlso known as Sierra-2-4A filter.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Stucki","page":"API Reference","title":"DitherPunk.Stucki","text":"Stucki()\n\nError diffusion algorithm using the filter\n\n        *   8   4\n2   4   8   4   2\n1   2   4   2   1   (1//42)\n\nReferences\n\n[1]  Stucki, P., \"MECCA - a multiple-error correcting computation algorithm      for bilevel image hardcopy reproduction.\"  Research Report RZ1060, IBM      Research Laboratory, Zurich, Switzerland, 1981.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Burkes","page":"API Reference","title":"DitherPunk.Burkes","text":"Burkes()\n\nError diffusion algorithm using the filter\n\n        *   8   4\n2   4   8   4   2\n1   2   4   2   1   (1//42)\n\nReferences\n\n[1] Burkes, D., \"Presentation of the Burkes error filter for use in preparing     continuous-tone images for presentation on bi-level devices.\" Unpublished, 1988.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Fan93","page":"API Reference","title":"DitherPunk.Fan93","text":"Fan93()\n\nError diffusion algorithm using the filter\n\n      *  7\n1  3  5            (1//16)\n\nA modification of the weights used in the Floyd-Steinberg algorithm.\n\nReferences\n\n[1] Z. Fan, \"A Simple Modification of Error Diffusion Weights\",     IS&T's 46th Annual Conference, May 9-14, 1993, Final Program and Advanced Printing of     Paper Summaries, pp 113-115 (1993).\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.ShiauFan","page":"API Reference","title":"DitherPunk.ShiauFan","text":"ShiauFan()\n\nError diffusion algorithm using the filter\n\n        *   4\n1   1   2           (1//8)\n\nReferences\n\n[1]  J. N. Shiau and Z. Fan. \"Method for quantization gray level pixel data with extended      distribution set\", US 5353127A, United States Patent and Trademark Office, Oct. 4, 1993\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.ShiauFan2","page":"API Reference","title":"DitherPunk.ShiauFan2","text":"ShiauFan2()\n\nError diffusion algorithm using the filter\n\n            *   8\n1   1   2   4       (1//16)\n\nReferences\n\n[1]  J. N. Shiau and Z. Fan. \"Method for quantization gray level pixel data with extended      distribution set\", US 5353127A, United States Patent and Trademark Office, Oct. 4, 1993 [2]  J. N. Shiau and Z. Fan. \"A set of easily implementable coefficients in error-diffusion      with reduced worm artifacts\" Color Imaging: Device-Independent Color, Color Hard Copy,      and Graphics Arts, volume 2658, pages 222â€“225. SPIE, March 1996.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.SimpleErrorDiffusion","page":"API Reference","title":"DitherPunk.SimpleErrorDiffusion","text":"SimpleErrorDiffusion()\n\nError diffusion algorithm using the filter\n\n*   1\n1   0         (1//2)\n\nReferences\n\n[1]  Floyd, R.W. and L. Steinberg, \"An Adaptive Algorithm for Spatial Gray      Scale.\"  SID 1975, International Symposium Digest of Technical Papers,      vol 1975m, pp. 36-37.\n\n\n\n\n\n","category":"function"},{"location":"api/#Ordered-dithering","page":"API Reference","title":"Ordered dithering","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"OrderedDither","category":"page"},{"location":"api/#DitherPunk.OrderedDither","page":"API Reference","title":"DitherPunk.OrderedDither","text":"OrderedDither(mat::AbstractMatrix)\n\nGeneralized ordered dithering algorithm using a threshold map. Takes a normalized threshold matrix mat.\n\nWhen applying the algorithm to an image, the threshold matrix is repeatedly tiled to match the size of the image. It is then applied as a per-pixel threshold map. Optionally, this final threshold map can be inverted by selecting invert_map=true.\n\n\n\n\n\n","category":"type"},{"location":"api/#Bayer","page":"API Reference","title":"Bayer","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Bayer","category":"page"},{"location":"api/#DitherPunk.Bayer","page":"API Reference","title":"DitherPunk.Bayer","text":"Bayer(; level)\n\nOrdered dithering using the Bayer matrix as a threshold matrix. The Bayer matrix is of dimension 2^n+1 times 2^n+1, where n is the level, which defaults to 1.\n\n[1]  Bayer, B.E., \"An Optimum Method for Two-Level Rendition of Continuous      Tone Pictures,\" IEEE International Conference on Communications,      Conference Records, 1973, pp. 26-11 to 26-15.\n\n\n\n\n\n","category":"function"},{"location":"api/#Halftoning","page":"API Reference","title":"Halftoning","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClusteredDots \nCentralWhitePoint \nBalancedCenteredPoint\nRhombus\nIM_checks\nIM_h4x4a\nIM_h6x6a\nIM_h8x8a\nIM_h4x4o\nIM_h6x6o\nIM_h8x8o\nIM_c5x5\nIM_c6x6\nIM_c7x7","category":"page"},{"location":"api/#DitherPunk.ClusteredDots","page":"API Reference","title":"DitherPunk.ClusteredDots","text":"ClusteredDots()\n\nClustered dots ordered dithering. Uses 6 times 6 threshold matrix CLUSTERED_DOTS_MAT.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.CentralWhitePoint","page":"API Reference","title":"DitherPunk.CentralWhitePoint","text":"CentralWhitePoint()\n\nCentral white point ordered dithering. Uses 6 times 6 threshold matrix CENTRAL_WHITE_POINT_MAT.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.BalancedCenteredPoint","page":"API Reference","title":"DitherPunk.BalancedCenteredPoint","text":"BalancedCenteredPoint()\n\nBalanced centered point ordered dithering. Uses 6 times 6 threshold matrix BALANCED_CENTERED_POINT_MAT.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.Rhombus","page":"API Reference","title":"DitherPunk.Rhombus","text":"Rhombus()\n\nDiagonal ordered matrix with balanced centered points. Uses 8 times 8 threshold matrix RHOMBUS_MAT.\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_checks","page":"API Reference","title":"DitherPunk.IM_checks","text":"IM_checks()\n\nImageMagick's Checkerboard 2x2 dither\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h4x4a","page":"API Reference","title":"DitherPunk.IM_h4x4a","text":"IM_h4x4a()\n\nImageMagick's Halftone 4x4 - Angled 45 degrees\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h6x6a","page":"API Reference","title":"DitherPunk.IM_h6x6a","text":"IM_h6x6a()\n\nImageMagick's Halftone 6x6 - Angled 45 degrees\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h8x8a","page":"API Reference","title":"DitherPunk.IM_h8x8a","text":"IM_h8x8a()\n\nImageMagick's Halftone 8x8 - Angled 45 degrees\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h4x4o","page":"API Reference","title":"DitherPunk.IM_h4x4o","text":"IM_h4x4o()\n\nImageMagick's Halftone 4x4 - Orthogonally Aligned\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h6x6o","page":"API Reference","title":"DitherPunk.IM_h6x6o","text":"IM_h6x6o()\n\nImageMagick's Halftone 6x6 - Orthogonally Aligned\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_h8x8o","page":"API Reference","title":"DitherPunk.IM_h8x8o","text":"IM_h8x8o()\n\nImageMagick's Halftone 8x8 - Orthogonally Aligned\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_c5x5","page":"API Reference","title":"DitherPunk.IM_c5x5","text":"IM_c5x5()\n\nImageMagick's Halftone 5x5 - Orthogonally Expanding Circle Patterns\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_c6x6","page":"API Reference","title":"DitherPunk.IM_c6x6","text":"IM_c6x6()\n\nImageMagick's Halftone 6x6 - Orthogonally Expanding Circle Patterns\n\n\n\n\n\n","category":"function"},{"location":"api/#DitherPunk.IM_c7x7","page":"API Reference","title":"DitherPunk.IM_c7x7","text":"IM_c7x7()\n\nImageMagick's Halftone 7x7 - Orthogonally Expanding Circle Patterns\n\n\n\n\n\n","category":"function"},{"location":"api/#Threshold-methods","page":"API Reference","title":"Threshold methods","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ConstantThreshold\nWhiteNoiseThreshold\nClosestColor","category":"page"},{"location":"api/#DitherPunk.ConstantThreshold","page":"API Reference","title":"DitherPunk.ConstantThreshold","text":"ConstantThreshold(threshold)\n\nUse a constant threshold map. Defaults to 0.5 if threshold isn't specified.\n\n\n\n\n\n","category":"type"},{"location":"api/#DitherPunk.WhiteNoiseThreshold","page":"API Reference","title":"DitherPunk.WhiteNoiseThreshold","text":"WhiteNoiseThreshold()\n\nUse white noise as a threshold map.\n\n\n\n\n\n","category":"type"},{"location":"api/#DitherPunk.ClosestColor","page":"API Reference","title":"DitherPunk.ClosestColor","text":"Simplest form of image quantization by turning each pixel to the closest one in the provided color palette cs. Technically this not a dithering algorithm as the quatization error is not \"randomized\".\n\n\n\n\n\n","category":"type"},{"location":"api/#Other","page":"API Reference","title":"Other","text":"","category":"section"},{"location":"api/#Utilities","page":"API Reference","title":"Utilities","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"upscale","category":"page"},{"location":"api/#DitherPunk.upscale","page":"API Reference","title":"DitherPunk.upscale","text":"upscale(img, scale)\n\nUpscale image by repeating individual pixels scale times.\n\n\n\n\n\n","category":"function"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/palette_swapping.jl\"","category":"page"},{"location":"generated/palette_swapping/#Color-palette-swapping","page":"Palette swapping","title":"Color palette swapping","text":"","category":"section"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"We can hide an image in another one by switching color palettes. Let's try to hide img_secret in img:","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"using Images\nusing DitherPunk\nusing IndirectArrays\nusing TestImages\n\nimg = testimage(\"peppers\")\nimg_secret = testimage(\"airplaneF16\");\nnothing #hide","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"First we dither to eight colors:","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"ncolors = 8\nd = dither(img, FloydSteinberg(), ncolors)","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"d_secret = dither(img_secret, FloydSteinberg(), ncolors)","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"Both of these images are IndirectArrays, which means they contain a color scheme","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"d.values","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"and a matrix of indices of type UInt8 pointing to the color in the color scheme:","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"d.index","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"Since typemax(UInt8) is 255 and therefore larger than ncolor^2, we can fit both images into a single index matrix by modifying the color schemes. To recover the secret image, it is then only necessary to swap the new color schemes.","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"combineindex(a, b) = UInt8((a - 1) * ncolors + b)\nfunction uncombineindex(c)\n    b = (c - 1) % ncolors + 1\n    a = Int((c - b) / ncolors) + 1\n    return a, b\nend\n\nfunction combine_images(ia1::IndirectArray, ia2::IndirectArray)\n    index = map(t -> combineindex(t...), zip(ia1.index, ia2.index))\n    cs1 = similar(ia1.values, ncolors^2)\n    cs2 = similar(ia2.values, ncolors^2)\n\n    for i in 1:(ncolors^2)\n        a, b = uncombineindex(i)\n        cs1[i] = ia1.values[a]\n        cs2[i] = ia2.values[b]\n    end\n    return index, cs1, cs2\nend;\nnothing #hide","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"Let's test this on our dithered images","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"index, cs, cs_secret = combine_images(d, d_secret);\nnothing #hide","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"When using the color scheme cs, we recover the peppers:","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"IndirectArray(index, cs)","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"However, when using the secret color scheme cs_secret, the F-16 airplane appears:","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"IndirectArray(index, cs_secret)","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"This certainly isn't a very secure way to hide an image in another one. However, it can be useful when trying to fit multiple images on low memory microcontrollers. As a matter of fact, this example was inspired by Mark Ferrari's GDC 2016 talk where he used a similar technique for this very purpose.","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"","category":"page"},{"location":"generated/palette_swapping/","page":"Palette swapping","title":"Palette swapping","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/sdf_halftoning.jl\"","category":"page"},{"location":"generated/sdf_halftoning/#Custom-halftoning-with-SDFs","page":"SDF halftoning","title":"Custom halftoning with SDFs","text":"","category":"section"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"Ordered dithering & halftoning algorithms typically use predefined threshold matrices with unique values ranging from 1//n to (n-1)/n, where n is the number of elements in the matrix.","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"In this example, we will be generating these threshold matrices from signed distance functions (SDFs). A good resource for those is Inigo Quilez' blogpost \"2D distance functions\".","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"Here we reimplement his function sdStar5:","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"using Images\nusing DitherPunk\nusing TestImages\n\nfunction star_sdf(x, y; r=0.5, rf=2.0)\n    k1 = [0.809016994375, -0.587785252292]\n    k2 = [-k1[1], k1[2]]\n    p = [abs(x), y]\n    p -= 2.0 * maximum([k1 â‹… p, 0.0]) * k1\n    p -= 2.0 * maximum([k2 â‹… p, 0.0]) * k2\n    p = [abs(p[1]), p[2] - r]\n    ba = rf * [-k1[2], k1[1]] - [0, 1]\n    h = clamp((p â‹… ba) / (ba â‹… ba), 0.0, r)\n    return norm(p - ba * h) * sign(p[2] * ba[1] - p[1] * ba[2])\nend;\nnothing #hide","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"This SDF can be visualized by its contour:","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"(Image: )","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"To convert an SDF to an OrderedDither algorithm, use this function:","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"function sdf2halftone(sdf, n)\n    rg = range(-1, 1; length=n)\n    A = [sdf(x, y) for y in rg, x in rg]\n    p = sortperm(reshape(-A, :))\n    B = Vector{Int}(undef, n^2)\n    B[p] .= 1:(n^2)\n    return OrderedDither(reshape(B, size(A)...)//(n^2 + 1))\nend;\nnothing #hide","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"Let's try it on a test image:","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"img = testimage(\"fabio_gray_512\")\nalg = sdf2halftone(star_sdf, 7)\ndither(img, alg)","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"We can also change the size of the matrix. Large halftoning matrices look great on high resolution images.","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"alg = sdf2halftone(star_sdf, 15)\ndither(img, alg)","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"","category":"page"},{"location":"generated/sdf_halftoning/","page":"SDF halftoning","title":"SDF halftoning","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/simple_example.jl\"","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"CurrentModule = DitherPunk","category":"page"},{"location":"generated/simple_example/#DitherPunk.jl","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"A dithering / digital halftoning package inspired by Lucas Pope's Obra Dinn and Surma's blogpost of the same name.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"note: Note\nThis package is part of a wider Julia-based image processing ecosystem. If you are starting out, then you may benefit from reading about some fundamental conventions that the ecosystem utilizes that are markedly different from how images are typically represented in OpenCV, MATLAB, ImageJ or Python.","category":"page"},{"location":"generated/simple_example/#Getting-started","page":"DitherPunk.jl","title":"Getting started","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"We start out by loading an image, in this case the lighthouse from TestImages.jl.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"using DitherPunk\nusing Images\nusing TestImages\n\nimg = testimage(\"lighthouse\")\nimg = imresize(img; ratio=1//2)","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"To apply binary dithering, we also need to convert the image to grayscale.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"img_gray = Gray.(img)","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"note:  Preprocessing\nSharpening the image and adjusting the contrast can emphasize the effect of the algorithms. It is highly recommended to play around with algorithms such as those provided by ImageContrastAdjustment.jl","category":"page"},{"location":"generated/simple_example/#Binary-dithering","page":"DitherPunk.jl","title":"Binary dithering","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"Since we already turned the image to grayscale, we are ready to apply Bayer dithering, an ordered dithering algorithm that leads to characteristic cross-hatch patterns.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"dither(img_gray, Bayer())","category":"page"},{"location":"generated/simple_example/#Color-spaces","page":"DitherPunk.jl","title":"Color spaces","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"Depending on the method, dithering in sRGB color space can lead to results that are too bright. To obtain a dithered image that more closely matches the human perception of brightness, grayscale images can be converted to linear color space using the boolean keyword argument to_linear.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"dither(img_gray, Bayer(); to_linear=true)","category":"page"},{"location":"generated/simple_example/#Separate-space-dithering","page":"DitherPunk.jl","title":"Separate-space dithering","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"All dithering algorithms in DitherPunk can also be applied to color images and will automatically apply channel-wise binary dithering.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"dither(img, Bayer())","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"note: Note\nBecause the algorithm is applied once per channel, the output of this algorithm depends on the color type of input image. RGB is recommended, but feel free to experiment!","category":"page"},{"location":"generated/simple_example/#Dithering-with-custom-colors","page":"DitherPunk.jl","title":"Dithering with custom colors","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"Let's assume we want to recreate an image by stacking a bunch of Rubik's cubes. Dithering algorithms are perfect for this task! We start out by defining a custom color scheme:","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"white = RGB{Float32}(1, 1, 1)\nyellow = RGB{Float32}(1, 1, 0)\ngreen = RGB{Float32}(0, 0.5, 0)\norange = RGB{Float32}(1, 0.5, 0)\nred = RGB{Float32}(1, 0, 0)\nblue = RGB{Float32}(0, 0, 1)\n\nrubiks_colors = [white, yellow, green, orange, red, blue]","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"All methods of type ErrorDiffusion and OrderedDither support dithering in custom colors.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"d = dither(img, FloydSteinberg(), rubiks_colors)","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"this looks much better than simply quantizing to the closest color!","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"d = dither(img, ClosestColor(), rubiks_colors)","category":"page"},{"location":"generated/simple_example/#ColorSchemes.jl","page":"DitherPunk.jl","title":"ColorSchemes.jl","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"Predefined color schemes from ColorSchemes.jl can also be used.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"using ColorSchemes\n\ndither(img, FloydSteinberg(), ColorSchemes.PuOr_7)","category":"page"},{"location":"generated/simple_example/#Automatic-color-schemes","page":"DitherPunk.jl","title":"Automatic color schemes","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"DitherPunk can generate optimized color schemes for each input image. Simply pass the size of the desired color palette as an additional argument:","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"dither(img, FloydSteinberg(), 8)","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"This uses Clustering.jl in the background.","category":"page"},{"location":"generated/simple_example/#Dithering-to-braille-characters","page":"DitherPunk.jl","title":"Dithering to braille characters","text":"","category":"section"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"It is also possible to dither images directly to Braille-characters using braille. The interface is the same as for binary dithering with dither:","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"img = imresize(img; ratio=1//3)\n\nbraille(img, FloydSteinberg())","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"This functionality makes use of UnicodePlots.jl.","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"","category":"page"},{"location":"generated/simple_example/","page":"DitherPunk.jl","title":"DitherPunk.jl","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/color_cycling.jl\"","category":"page"},{"location":"generated/color_cycling/#Color-cycling","page":"Color cycling","title":"Color cycling","text":"","category":"section"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"We will try to fake a subtle animation of the water in this public domain image:","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"using Images\nusing DitherPunk\nusing IndirectArrays\n\nimg = load(\"../../assets/waterfall.png\")","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"We import DitherPunk's internal function get_colorscheme to obtain a color scheme:","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"ncolors = 16\ncs = DitherPunk.get_colorscheme(img, ncolors)\ncs = sort(cs; by=c -> -c.l)","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"The first three colors are white-ish and correspond to the water.","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"Let's look at the dithered result using color_error_multiplier=1.0 for a more visible dithering pattern:","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"d1 = dither(img, Bayer(;color_error_multiplier=1.0), cs)","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"We create two more frames by cycling the first three colors","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"d2 = IndirectArray(d1.index, cs[[3, 1, 2, 4:end...]])\nd3 = IndirectArray(d1.index, cs[[2, 3, 1, 4:end...]]);\nnothing #hide","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"And finally create a gif out of the modified images:","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"ds = cat(d1, d2, d3; dims=3)\nsave(\"waterfall.gif\", ds; fps=5)","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"The result should look like this:","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"(Image: )","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"We really nailed that Web 1.0 look!","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"To see how good color cycling can look when it is hand-drawn by a professional, take a look at Mark Ferrari's amazing work.","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"","category":"page"},{"location":"generated/color_cycling/","page":"Color cycling","title":"Color cycling","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/gallery_images.jl\"","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"using DitherPunk\nusing Images\nusing TestImages","category":"page"},{"location":"generated/gallery_images/#Test-image-gallery","page":"Images","title":"Test image gallery","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"This gallery uses images from TestImages.jl.","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"function preprocess(img)\n    img = Gray.(img)\n    return imresize(img; ratio=1 / 2)\nend\n\nfile_names = [\n    \"cameraman\", \"lake_gray\", \"house\", \"fabio_gray_512\", \"mandril_gray\", \"peppers_gray\"\n]\nimgs = [preprocess(testimage(file)) for file in file_names]\nmosaic(imgs; ncol=3)","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"Our test function test_on_images just runs a dithering algorithm on all six images in linear color space (to_liner=true).","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"function test_on_images(alg; to_linear=false)\n    dithers = [dither(img, alg; to_linear) for img in imgs]\n    return mosaic(dithers; ncol=3)\nend","category":"page"},{"location":"generated/gallery_images/#Threshold-dithering","page":"Images","title":"Threshold dithering","text":"","category":"section"},{"location":"generated/gallery_images/#ConstantThreshold","page":"Images","title":"ConstantThreshold","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(ConstantThreshold())","category":"page"},{"location":"generated/gallery_images/#WhiteNoiseThreshold","page":"Images","title":"WhiteNoiseThreshold","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(WhiteNoiseThreshold())","category":"page"},{"location":"generated/gallery_images/#Ordered-dithering","page":"Images","title":"Ordered dithering","text":"","category":"section"},{"location":"generated/gallery_images/#Bayer-matrices","page":"Images","title":"Bayer matrices","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"Level 1","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Bayer())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"Level 2","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Bayer(; level=2))","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"Level 3","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Bayer(; level=3))","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"Level 4","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Bayer(; level=4))","category":"page"},{"location":"generated/gallery_images/#ClusteredDots","page":"Images","title":"ClusteredDots","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(ClusteredDots())","category":"page"},{"location":"generated/gallery_images/#CentralWhitePoint","page":"Images","title":"CentralWhitePoint","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(CentralWhitePoint())","category":"page"},{"location":"generated/gallery_images/#BalancedCenteredPoint","page":"Images","title":"BalancedCenteredPoint","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(BalancedCenteredPoint())","category":"page"},{"location":"generated/gallery_images/#Rhombus","page":"Images","title":"Rhombus","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Rhombus())","category":"page"},{"location":"generated/gallery_images/#ImageMagick-methods","page":"Images","title":"ImageMagick methods","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_checks())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h4x4a())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h6x6a())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h8x8a())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h4x4o())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h6x6o())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_h8x8o())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_c5x5())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_c6x6())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(IM_c7x7())","category":"page"},{"location":"generated/gallery_images/#Error-diffusion","page":"Images","title":"Error diffusion","text":"","category":"section"},{"location":"generated/gallery_images/#SimpleErrorDiffusion","page":"Images","title":"SimpleErrorDiffusion","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(SimpleErrorDiffusion())","category":"page"},{"location":"generated/gallery_images/#FloydSteinberg","page":"Images","title":"FloydSteinberg","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(FloydSteinberg())","category":"page"},{"location":"generated/gallery_images/#JarvisJudice","page":"Images","title":"JarvisJudice","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(JarvisJudice())","category":"page"},{"location":"generated/gallery_images/#Stucki","page":"Images","title":"Stucki","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Stucki())","category":"page"},{"location":"generated/gallery_images/#Burkes","page":"Images","title":"Burkes","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Burkes())","category":"page"},{"location":"generated/gallery_images/#Sierra","page":"Images","title":"Sierra","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Sierra())","category":"page"},{"location":"generated/gallery_images/#TwoRowSierra","page":"Images","title":"TwoRowSierra","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(TwoRowSierra())","category":"page"},{"location":"generated/gallery_images/#SierraLite","page":"Images","title":"SierraLite","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(SierraLite())","category":"page"},{"location":"generated/gallery_images/#Fan93()","page":"Images","title":"Fan93()","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Fan93())","category":"page"},{"location":"generated/gallery_images/#ShiauFan()","page":"Images","title":"ShiauFan()","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(ShiauFan())","category":"page"},{"location":"generated/gallery_images/#ShiauFan2()","page":"Images","title":"ShiauFan2()","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(ShiauFan2())","category":"page"},{"location":"generated/gallery_images/#Atkinson()","page":"Images","title":"Atkinson()","text":"","category":"section"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"test_on_images(Atkinson())","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"","category":"page"},{"location":"generated/gallery_images/","page":"Images","title":"Images","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/gallery_gradient.jl\"","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"using DitherPunk\nusing DitherPunk: gradient_image, test_on_gradient\nusing Images","category":"page"},{"location":"generated/gallery_gradient/#Gallery","page":"Gradient","title":"Gallery","text":"","category":"section"},{"location":"generated/gallery_gradient/#On-color-spaces","page":"Gradient","title":"On color spaces","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"A simple linear gradient works well to reveal the characteristic patterns of different dithering algorithms.","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"srbg, linear = gradient_image(100, 800);\nmosaicview(srbg, linear)","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"The pixel intensities in the image srgb increase linearly from 0 to 1. The second image linear has been converted from sRGB to a linear representation, which more closely matches our human perception of brightness.","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"The helper function test_on_gradient takes a dithering algorithm and runs it on both the srgb and the linear image. It then shows a comparison of both inputs and outputs.","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"Most dithering algorithms in DitherPunk.jl provide an optional parameter to_linear, which converts the input image to a linear color space before applying the dithering. Select what looks best!","category":"page"},{"location":"generated/gallery_gradient/#Threshold-dithering","page":"Gradient","title":"Threshold dithering","text":"","category":"section"},{"location":"generated/gallery_gradient/#ConstantThreshold","page":"Gradient","title":"ConstantThreshold","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(ConstantThreshold())","category":"page"},{"location":"generated/gallery_gradient/#WhiteNoiseThreshold","page":"Gradient","title":"WhiteNoiseThreshold","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(WhiteNoiseThreshold())","category":"page"},{"location":"generated/gallery_gradient/#Ordered-dithering","page":"Gradient","title":"Ordered dithering","text":"","category":"section"},{"location":"generated/gallery_gradient/#Bayer-matrices","page":"Gradient","title":"Bayer matrices","text":"","category":"section"},{"location":"generated/gallery_gradient/#bayer_dithering","page":"Gradient","title":"bayer_dithering","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Bayer())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"The order of the Bayer-matrix can be specified through the parameter level, which defaults to 1. Level 2","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Bayer(; level=2))","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"Level 3","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Bayer(; level=3))","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"Level 4","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Bayer(; level=4))","category":"page"},{"location":"generated/gallery_gradient/#Clustered-/-halftone-dithering","page":"Gradient","title":"Clustered / halftone dithering","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"The following methods have large characteristic patterns and are therefore better suited for large images.","category":"page"},{"location":"generated/gallery_gradient/#ClusteredDots","page":"Gradient","title":"ClusteredDots","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(ClusteredDots())","category":"page"},{"location":"generated/gallery_gradient/#CentralWhitePoint","page":"Gradient","title":"CentralWhitePoint","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(CentralWhitePoint())","category":"page"},{"location":"generated/gallery_gradient/#BalancedCenteredPoint","page":"Gradient","title":"BalancedCenteredPoint","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(BalancedCenteredPoint())","category":"page"},{"location":"generated/gallery_gradient/#Rhombus","page":"Gradient","title":"Rhombus","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Rhombus())","category":"page"},{"location":"generated/gallery_gradient/#ImageMagick-methods","page":"Gradient","title":"ImageMagick methods","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_checks())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h4x4a())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h6x6a())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h8x8a())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h4x4o())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h6x6o())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_h8x8o())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_c5x5())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_c6x6())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(IM_c7x7())","category":"page"},{"location":"generated/gallery_gradient/#Error-diffusion","page":"Gradient","title":"Error diffusion","text":"","category":"section"},{"location":"generated/gallery_gradient/#SimpleErrorDiffusion","page":"Gradient","title":"SimpleErrorDiffusion","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(SimpleErrorDiffusion())","category":"page"},{"location":"generated/gallery_gradient/#FloydSteinberg","page":"Gradient","title":"FloydSteinberg","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(FloydSteinberg())","category":"page"},{"location":"generated/gallery_gradient/#JarvisJudice","page":"Gradient","title":"JarvisJudice","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(JarvisJudice())","category":"page"},{"location":"generated/gallery_gradient/#Stucki","page":"Gradient","title":"Stucki","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Stucki())","category":"page"},{"location":"generated/gallery_gradient/#Burkes","page":"Gradient","title":"Burkes","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Burkes())","category":"page"},{"location":"generated/gallery_gradient/#Sierra","page":"Gradient","title":"Sierra","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Sierra())","category":"page"},{"location":"generated/gallery_gradient/#TwoRowSierra","page":"Gradient","title":"TwoRowSierra","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(TwoRowSierra())","category":"page"},{"location":"generated/gallery_gradient/#SierraLite","page":"Gradient","title":"SierraLite","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(SierraLite())","category":"page"},{"location":"generated/gallery_gradient/#Fan93()","page":"Gradient","title":"Fan93()","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Fan93())","category":"page"},{"location":"generated/gallery_gradient/#ShiauFan()","page":"Gradient","title":"ShiauFan()","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(ShiauFan())","category":"page"},{"location":"generated/gallery_gradient/#ShiauFan2()","page":"Gradient","title":"ShiauFan2()","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(ShiauFan2())","category":"page"},{"location":"generated/gallery_gradient/#Atkinson()","page":"Gradient","title":"Atkinson()","text":"","category":"section"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"test_on_gradient(Atkinson())","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"","category":"page"},{"location":"generated/gallery_gradient/","page":"Gradient","title":"Gradient","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"CurrentModule = DitherPunk","category":"page"},{"location":"#DitherPunk.jl","page":"Getting started","title":"DitherPunk.jl","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"A dithering / digital halftoning package inspired by Lucas Pope's Obra Dinn and Surma's blogpost of the same name.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"note: Note\nThis package is part of a wider Julia-based image processing ecosystem. If you are starting out, then you may benefit from reading about some fundamental conventions that the ecosystem utilizes that are markedly different from how images are typically represented in OpenCV, MATLAB, ImageJ or Python.","category":"page"},{"location":"#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"We start out by loading an image, in this case the lighthouse from TestImages.jl.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using DitherPunk\nusing Images\nusing TestImages\n\nimg = testimage(\"lighthouse\")\nimg = imresize(img; ratio=1//2)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"To apply binary dithering, we also need to convert the image to grayscale.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"img_gray = Gray.(img)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"note:  Preprocessing\nSharpening the image and adjusting the contrast can emphasize the effect of the algorithms. It is highly recommended to play around with algorithms such as those provided by ImageContrastAdjustment.jl","category":"page"},{"location":"#Binary-dithering","page":"Getting started","title":"Binary dithering","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Since we already turned the image to grayscale, we are ready to apply Bayer dithering, an ordered dithering algorithm that leads to characteristic cross-hatch patterns.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"dither(img_gray, Bayer())","category":"page"},{"location":"#Color-spaces","page":"Getting started","title":"Color spaces","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Depending on the method, dithering in sRGB color space can lead to results that are too bright. To obtain a dithered image that more closely matches the human perception of brightness, grayscale images can be converted to linear color space using the boolean keyword argument to_linear.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"dither(img_gray, Bayer(); to_linear=true)","category":"page"},{"location":"#Separate-space-dithering","page":"Getting started","title":"Separate-space dithering","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"All dithering algorithms in DitherPunk can also be applied to color images and will automatically apply channel-wise binary dithering.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"dither(img, Bayer())","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"note: Note\nBecause the algorithm is applied once per channel, the output of this algorithm depends on the color type of input image. RGB is recommended, but feel free to experiment!","category":"page"},{"location":"#Dithering-with-custom-colors","page":"Getting started","title":"Dithering with custom colors","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Let's assume we want to recreate an image by stacking a bunch of Rubik's cubes. Dithering algorithms are perfect for this task! We start out by defining a custom color scheme:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"white = RGB{Float32}(1, 1, 1)\nyellow = RGB{Float32}(1, 1, 0)\ngreen = RGB{Float32}(0, 0.5, 0)\norange = RGB{Float32}(1, 0.5, 0)\nred = RGB{Float32}(1, 0, 0)\nblue = RGB{Float32}(0, 0, 1)\n\nrubiks_colors = [white, yellow, green, orange, red, blue]","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"Currently, dithering in custom colors is limited to ErrorDiffusion algorithms such as FloydSteinberg.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"d = dither(img, FloydSteinberg(), rubiks_colors)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"this looks much better than simply quantizing to the closest color!","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"d = dither(img, ClosestColor(), rubiks_colors)","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"For an overview of all error diffusion algorithms, check out the [gallery].","category":"page"},{"location":"#ColorSchemes.jl","page":"Getting started","title":"ColorSchemes.jl","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Predefined color schemes from ColorSchemes.jl can also be used.","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using ColorSchemes\n\ndither(img, FloydSteinberg(), ColorSchemes.PuOr_7)","category":"page"},{"location":"#Clustering.jl","page":"Getting started","title":"Clustering.jl","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Using Clustering.jl allows you to generate optimized color schemes. Simply pass the size of the desired color palette:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Clustering\n\ndither(img, FloydSteinberg(), 8)","category":"page"},{"location":"#UnicodePlots.jl","page":"Getting started","title":"UnicodePlots.jl","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Using UnicodePlots.jl, it is also possible to dither images directly to Braille-characters using braille. The interface is the same as for binary dithering with dither:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using UnicodePlots\nimg = imresize(img; ratio=1//3)\n\nbraille(img, FloydSteinberg())","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"EditURL = \"https://github.com/JuliaImages/DitherPunk.jl/blob/master/docs/literate/ascii.jl\"","category":"page"},{"location":"generated/ascii/#ASCII-dithering","page":"ASCII dithering","title":"ASCII dithering","text":"","category":"section"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"In this example, we are going to approximate a grayscale gradient with an ASCII ramp such as .:-=+*#%@.","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"using Images\nusing DitherPunk\nusing TestImages\n\nimg = testimage(\"cameraman\")","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"When loading an image, we need to compensate for the aspect ratio of ASCII characters.","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"img = imresize(img; ratio=(1//14, 1//6))","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"We then define an ASCII ramp and a corresponding grayscale color scheme of matching length.","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"ascii_ramp = split(\" .:-=+*#%@\", \"\")\ncs = Gray.(range(0, 1; length=10))","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"Dithering will return an IndirectArray:","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"d = dither(img, FloydSteinberg(), cs)","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"Instead of showing d as an image, we can use its indices to select the corresponding ASCII characters from the ramp.","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"mat = ascii_ramp[d.index]","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"Pretty printing each row of this matrix will output the image:","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"for r in eachrow(mat)\n    println(join(r))\nend","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"","category":"page"},{"location":"generated/ascii/","page":"ASCII dithering","title":"ASCII dithering","text":"This page was generated using Literate.jl.","category":"page"}]
}
